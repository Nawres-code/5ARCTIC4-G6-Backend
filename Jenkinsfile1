pipeline {
    agent any

    environment {
        ACR_NAME = "lakhalacr.azurecr.io"
        RESOURCE_GROUP = 'devopsResourceGroup'
        AKS_NAME = 'devopscluster' 
        IMAGE_BACKEND = 'my-backend'
        IMAGE_FRONTEND = 'my-frontend'
        IMAGE_MYSQL = 'mysql'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Clone Repos') {
            parallel {
                stage('Clone Frontend Repo') {
                    steps {
                        dir('frontend') {
                            git branch: 'LakhalDevOpsFrontend', url: 'https://github.com/Nawres-code/5ARCTIC4-G6-Frontend.git'
                        }
                    }
                }
                stage('Clone Backend Repo') {
                    steps {
                        dir('backend') {
                            git branch: 'LakhalBackDevOps', url: 'https://github.com/Nawres-code/5ARCTIC4-G6-Backend.git'
                        }
                    }
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    script {
                        sh 'mvn clean package -DskipTests' // Build the backend, skipping tests
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Prepare MySQL Image') {
                    steps {
                        script {
                            sh "docker pull mysql:8.0"
                            sh "docker tag mysql:8.0 ${ACR_NAME}/${IMAGE_MYSQL}:${IMAGE_TAG}"
                        }
                    }
                }
                stage('Build Backend Image') {
                    steps {
                        script {
                            sh "docker build --progress=plain -t ${ACR_NAME}/${IMAGE_BACKEND}:${IMAGE_TAG} ./backend"
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        script {
                            sh "docker build --progress=plain -t ${ACR_NAME}/${IMAGE_FRONTEND}:${IMAGE_TAG} ./frontend"
                        }
                    }
                }
            }
        }

        stage('Login to ACR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'acr_credentials', passwordVariable: 'ACR_PASSWORD', usernameVariable: 'ACR_USERNAME')]) {
                        sh "echo \$ACR_PASSWORD | docker login ${ACR_NAME} -u \$ACR_USERNAME --password-stdin"
                    }
                }
            }
        }

        stage('Push Images to ACR') {
            steps {
                script {
                    sh "docker push ${ACR_NAME}/${IMAGE_MYSQL}:${IMAGE_TAG}"
                    sh "docker push ${ACR_NAME}/${IMAGE_BACKEND}:${IMAGE_TAG}"
                    sh "docker push ${ACR_NAME}/${IMAGE_FRONTEND}:${IMAGE_TAG}"
                }
            }
        }

        stage('Cleanup Local Images') {
            steps {
                script {
                    sh "docker rmi ${ACR_NAME}/${IMAGE_MYSQL}:${IMAGE_TAG} ${ACR_NAME}/${IMAGE_BACKEND}:${IMAGE_TAG} ${ACR_NAME}/${IMAGE_FRONTEND}:${IMAGE_TAG} || true"
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                script {
                    try {
                        sh '''
                        kubectl apply -f mysql-deployment.yaml
                        kubectl apply -f mysql-service.yaml
                        kubectl apply -f backend-deployment.yaml
                        kubectl apply -f backend-service.yaml
                        kubectl apply -f frontend-deployment.yaml
                        kubectl apply -f frontend-service.yaml
                        '''
                    } catch (Exception e) {
                        error("Deployment to AKS failed: ${e.message}")
                    }
                }
            }
        }
    }

    post {
        always {
            sh "docker logout ${ACR_NAME}"
        }
        cleanup {
            sh 'docker system prune -af'
        }
        success {
            echo "Deployment to AKS completed successfully!"
        }
        failure {
            echo "Deployment failed. Please check the logs for details."
        }
    }
}
